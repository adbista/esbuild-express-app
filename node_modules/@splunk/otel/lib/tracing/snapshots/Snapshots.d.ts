import { Resource } from '@opentelemetry/resources';
import { SnapshotSpanProcessor } from './SnapshotSpanProcessor';
import type { CpuProfile, ProfilingExtension } from '../../profiling/types';
import { OtlpHttpProfilingExporter } from '../../profiling/OtlpHttpProfilingExporter';
export interface StartSnapshotProfilingOptions {
    serviceName: string;
    endpoint: string;
    resource: Resource;
    samplingIntervalMs?: number;
    collectionIntervalMs?: number;
}
type SnapshotProfilingOptions = Required<StartSnapshotProfilingOptions>;
export declare class SnapshotProfiler {
    processor: SnapshotSpanProcessor;
    extension: ProfilingExtension;
    profilerHandle: number;
    activeSnapshots: number;
    collectionLoop: NodeJS.Timeout;
    stopTimeout: NodeJS.Timeout | undefined;
    exporter: OtlpHttpProfilingExporter | undefined;
    constructor(options: SnapshotProfilingOptions);
    _export(profile: CpuProfile | null): Promise<void>;
    stop(): Promise<void>;
}
export declare function startSnapshotProfiling(options: StartSnapshotProfilingOptions): void;
export declare function stopSnapshotProfiling(): Promise<void>;
export declare function isSnapshotProfilingEnabled(): boolean;
export declare function snapshotSpanProcessor(): SnapshotSpanProcessor | undefined;
export declare function snapshotProfiler(): SnapshotProfiler | undefined;
export {};
//# sourceMappingURL=Snapshots.d.ts.map