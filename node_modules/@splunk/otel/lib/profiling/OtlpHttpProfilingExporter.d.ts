import { CpuProfile, HeapProfile, ProfilingExporter } from './types';
import { Resource } from '@opentelemetry/resources';
import { InstrumentationScope } from '@opentelemetry/core';
import type { OTLPLogExporter } from '@opentelemetry/exporter-logs-otlp-proto';
export type ProfilerInstrumentationSource = 'continuous' | 'snapshot';
export interface ExporterOptions {
    callstackInterval: number;
    endpoint: string;
    instrumentationSource: ProfilerInstrumentationSource;
    resource: Resource;
}
export declare class OtlpHttpProfilingExporter implements ProfilingExporter {
    _callstackInterval: number;
    _endpoint: string;
    _exporter: OTLPLogExporter | undefined;
    _resource: Resource;
    _instrumentationSource: ProfilerInstrumentationSource;
    _scope: InstrumentationScope;
    constructor(options: ExporterOptions);
    send(profile: CpuProfile): Promise<void>;
    sendHeapProfile(profile: HeapProfile): Promise<void>;
    _getExporter(): OTLPLogExporter;
}
//# sourceMappingURL=OtlpHttpProfilingExporter.d.ts.map